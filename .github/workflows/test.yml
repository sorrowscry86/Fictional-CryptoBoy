name: CryptoBoy CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'claude/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check formatting with black
      run: |
        black --check --diff --line-length 100 .

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: cryptoboy
          RABBITMQ_DEFAULT_PASS: cryptoboy123
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r services/requirements.txt
        pip install pytest pytest-asyncio

    - name: Wait for services
      run: |
        sleep 10

    - name: Run integration tests
      env:
        RABBITMQ_HOST: localhost
        RABBITMQ_PORT: 5672
        RABBITMQ_USER: cryptoboy
        RABBITMQ_PASS: cryptoboy123
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/integration/ -v

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build data ingestor image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/data_ingestor/Dockerfile
        push: false
        tags: cryptoboy-data-ingestor:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build sentiment analyzer image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/sentiment_analyzer/Dockerfile
        push: false
        tags: cryptoboy-sentiment-analyzer:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build signal cacher image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/signal_cacher/Dockerfile
        push: false
        tags: cryptoboy-signal-cacher:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run safety check
      run: |
        safety check --file requirements.txt --continue-on-error
        safety check --file services/requirements.txt --continue-on-error

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, docker-build, security-scan]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Lint Status: ${{ needs.lint-and-format.result }}"
        echo "Unit Tests Status: ${{ needs.unit-tests.result }}"
        echo "Integration Tests Status: ${{ needs.integration-tests.result }}"
        echo "Docker Build Status: ${{ needs.docker-build.result }}"
        echo "Security Scan Status: ${{ needs.security-scan.result }}"
