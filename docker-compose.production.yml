version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: trading-rabbitmq-prod
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:?RabbitMQ user not set}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:?RabbitMQ password not set}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - trading-network

  redis:
    image: redis:alpine
    container_name: trading-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  ollama:
    image: ollama/ollama:latest
    container_name: trading-bot-ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading-network

  market-streamer:
    build:
      context: .
      dockerfile: services/data_ingestor/Dockerfile
    container_name: trading-market-streamer
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-cryptoboy}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-cryptoboy123}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    restart: unless-stopped
    networks:
      - trading-network

  news-poller:
    build:
      context: .
      dockerfile: services/data_ingestor/Dockerfile.news
    container_name: trading-news-poller
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-cryptoboy}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-cryptoboy123}
    command: python -m services.data_ingestor.news_poller
    restart: unless-stopped
    networks:
      - trading-network

  sentiment-processor:
    build:
      context: .
      dockerfile: services/sentiment_analyzer/Dockerfile
    container_name: trading-sentiment-processor
    depends_on:
      - rabbitmq
      - ollama
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-cryptoboy}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-cryptoboy123}
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=phi3:mini
    restart: unless-stopped
    networks:
      - trading-network

  signal-cacher:
    build:
      context: .
      dockerfile: services/signal_cacher/Dockerfile
    container_name: trading-signal-cacher
    depends_on:
      - rabbitmq
      - redis
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-cryptoboy}
      - RABBITMQ_PASS=${RABBITMQ_PASS:-cryptoboy123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: unless-stopped
    networks:
      - trading-network

  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-bot-app
    depends_on:
      - ollama
      - redis
      - rabbitmq
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./user_data:/app/user_data
      - ./config:/app/config:ro
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - DRY_RUN=${DRY_RUN:-true}
      - API_USERNAME=${API_USERNAME}
      - API_PASSWORD=${API_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    restart: unless-stopped
    networks:
      - trading-network
    ports:
      - "8080:8080"  # API server
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "${API_USERNAME}:${API_PASSWORD}", "http://localhost:8080/api/v1/ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Real-Time Monitoring Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-dashboard
    command: python monitoring/dashboard_service.py
    depends_on:
      - redis
      - rabbitmq
      - trading-bot
    volumes:
      - ./monitoring:/app/monitoring:ro
      - ./services/common:/app/services/common:ro
      - ./user_data:/app/user_data:ro
      - ./.env:/app/.env:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker access for stats
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:?RabbitMQ user not set}
      - RABBITMQ_PASS=${RABBITMQ_PASS:?RabbitMQ password not set}
    restart: unless-stopped
    networks:
      - trading-network
    ports:
      - "8081:8081"  # Dashboard UI

networks:
  trading-network:
    driver: bridge

volumes:
  ollama_models:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
